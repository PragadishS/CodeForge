{"ast":null,"code":"var _jsxFileName = \"/Users/pragadish/Code Forge/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Checking if token is expired\n  const isTokenExpired = useCallback(() => {\n    if (!token) return true;\n    try {\n      const decoded = jwtDecode(token);\n      // Add a small buffer (e.g., 10 seconds) to account for timing differences\n      return decoded.exp < Date.now() / 1000 - 10;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      return true;\n    }\n  }, [token]);\n\n  // Loading user if token exists - defined with useCallback to prevent dependency issues\n  const loadUser = useCallback(async () => {\n    try {\n      // Checking if token is expired\n      if (isTokenExpired()) {\n        localStorage.removeItem('token');\n        setToken(null);\n        setUser(null);\n        setIsAuthenticated(false);\n        toast.error('Session expired. Please login again.');\n        setLoading(false);\n        return;\n      }\n      const res = await axios.get('/api/auth/me', {\n        timeout: 10000,\n        // 10 seconds timeout\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setUser(res.data);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Error loading user:', error);\n\n      // Handle specific error cases\n      if (error.code === 'ECONNABORTED') {\n        toast.error('Request timed out. Please try again.');\n      } else if (!error.response) {\n        toast.error('Network error. Please check your connection.');\n      } else if (error.response.status === 401) {\n        toast.error('Authentication failed. Please login again.');\n      } else {\n        toast.error('Failed to load user profile. Please login again.');\n      }\n      localStorage.removeItem('token');\n      setToken(null);\n      setUser(null);\n      setIsAuthenticated(false);\n    } finally {\n      setLoading(false);\n    }\n  }, [isTokenExpired, setToken, setUser, setIsAuthenticated, setLoading]);\n\n  // Setting axios default headers\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['x-auth-token'] = token;\n      loadUser();\n    } else {\n      delete axios.defaults.headers.common['x-auth-token'];\n      setIsAuthenticated(false);\n      setUser(null);\n      setLoading(false);\n    }\n  }, [token, loadUser, setIsAuthenticated, setUser, setLoading]);\n\n  // Registering a new user\n  const register = async formData => {\n    try {\n      // Log payload for debugging\n      console.log(\"Register payload:\", JSON.stringify(formData));\n      const res = await axios.post('/api/auth/register', formData, {\n        timeout: 15000,\n        // 15 seconds timeout\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setToken(res.data.token);\n      localStorage.setItem('token', res.data.token);\n      setUser(res.data.user);\n      setIsAuthenticated(true);\n      toast.success('Registration successful!');\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n\n      // Enhanced error handling\n      if (error.code === 'ECONNABORTED') {\n        toast.error('Registration request timed out. Please try again.');\n      } else if (!error.response) {\n        toast.error('Network error. Please check your connection.');\n      } else {\n        const errorMessage = error.response && error.response.data.error ? error.response.data.error : 'Registration failed. Please try again.';\n        toast.error(errorMessage);\n      }\n      return false;\n    }\n  };\n\n  // Login user\n  const login = async formData => {\n    try {\n      var _document$querySelect;\n      // Clear existing token first\n      localStorage.removeItem('token');\n      delete axios.defaults.headers.common['x-auth-token'];\n\n      // Log payload for debugging\n      console.log(\"Login payload:\", JSON.stringify(formData));\n\n      // Get CSRF token if your backend uses it\n      const csrfToken = (_document$querySelect = document.querySelector('meta[name=\"csrf-token\"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.getAttribute('content');\n      const res = await axios.post('/api/auth/login', formData, {\n        timeout: 10000,\n        // 10 seconds timeout\n        headers: {\n          'Content-Type': 'application/json',\n          ...(csrfToken && {\n            'X-CSRF-Token': csrfToken\n          })\n        }\n      });\n      const newToken = res.data.token;\n\n      // Validate token before storing\n      try {\n        jwtDecode(newToken); // This will throw an error if token is invalid\n      } catch (tokenError) {\n        console.error('Invalid token received:', tokenError);\n        toast.error('Authentication error. Please try again.');\n        return false;\n      }\n      setToken(newToken);\n      localStorage.setItem('token', newToken);\n      setUser(res.data.user);\n      setIsAuthenticated(true);\n      toast.success('Login successful!');\n      return true;\n    } catch (error) {\n      console.error('Login error:', error);\n\n      // Enhanced error handling\n      if (error.code === 'ECONNABORTED') {\n        toast.error('Login request timed out. Please try again.');\n      } else if (!error.response) {\n        toast.error('Network error. Please check your connection.');\n      } else if (error.response.status === 400) {\n        toast.error('Invalid credentials. Please check your email and password.');\n      } else if (error.response.status === 401) {\n        toast.error('Unauthorized. Please check your credentials.');\n      } else if (error.response.status === 403) {\n        toast.error('Account locked or disabled. Please contact support.');\n      } else {\n        const errorMessage = error.response && error.response.data.error ? error.response.data.error : 'Login failed. Please check your credentials.';\n        toast.error(errorMessage);\n      }\n      return false;\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete axios.defaults.headers.common['x-auth-token'];\n    setToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n    toast.info('You have been logged out');\n  };\n\n  // Checking if user is admin\n  const isAdmin = () => {\n    return user && user.role === 'admin';\n  };\n\n  // Checking if user is the author of a resource\n  const isAuthor = authorId => {\n    return user && user._id === authorId;\n  };\n\n  // Refresh token function (if your backend supports it)\n  const refreshToken = async () => {\n    try {\n      const res = await axios.post('/api/auth/refresh', {\n        token\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const newToken = res.data.token;\n      setToken(newToken);\n      localStorage.setItem('token', newToken);\n      return true;\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      logout();\n      toast.error('Session expired. Please login again.');\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      isAuthenticated,\n      loading,\n      register,\n      login,\n      logout,\n      isTokenExpired,\n      isAdmin,\n      isAuthor,\n      refreshToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"wU8Jy9YDufgprhtjRNFYfNaiYt0=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","axios","jwtDecode","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","token","setToken","localStorage","getItem","isAuthenticated","setIsAuthenticated","loading","setLoading","isTokenExpired","decoded","exp","Date","now","error","console","loadUser","removeItem","res","get","timeout","headers","data","code","response","status","defaults","common","register","formData","log","JSON","stringify","post","setItem","success","errorMessage","login","_document$querySelect","csrfToken","document","querySelector","getAttribute","newToken","tokenError","logout","info","isAdmin","role","isAuthor","authorId","_id","refreshToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pragadish/Code Forge/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport { toast } from 'react-toastify';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Checking if token is expired\n  const isTokenExpired = useCallback(() => {\n    if (!token) return true;\n    \n    try {\n      const decoded = jwtDecode(token);\n      // Add a small buffer (e.g., 10 seconds) to account for timing differences\n      return decoded.exp < (Date.now() / 1000) - 10;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      return true;\n    }\n  }, [token]);\n\n  // Loading user if token exists - defined with useCallback to prevent dependency issues\n  const loadUser = useCallback(async () => {\n    try {\n      // Checking if token is expired\n      if (isTokenExpired()) {\n        localStorage.removeItem('token');\n        setToken(null);\n        setUser(null);\n        setIsAuthenticated(false);\n        toast.error('Session expired. Please login again.');\n        setLoading(false);\n        return;\n      }\n\n      const res = await axios.get('/api/auth/me', {\n        timeout: 10000, // 10 seconds timeout\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      setUser(res.data);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Error loading user:', error);\n      \n      // Handle specific error cases\n      if (error.code === 'ECONNABORTED') {\n        toast.error('Request timed out. Please try again.');\n      } else if (!error.response) {\n        toast.error('Network error. Please check your connection.');\n      } else if (error.response.status === 401) {\n        toast.error('Authentication failed. Please login again.');\n      } else {\n        toast.error('Failed to load user profile. Please login again.');\n      }\n      \n      localStorage.removeItem('token');\n      setToken(null);\n      setUser(null);\n      setIsAuthenticated(false);\n    } finally {\n      setLoading(false);\n    }\n  }, [isTokenExpired, setToken, setUser, setIsAuthenticated, setLoading]);\n\n  // Setting axios default headers\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['x-auth-token'] = token;\n      loadUser();\n    } else {\n      delete axios.defaults.headers.common['x-auth-token'];\n      setIsAuthenticated(false);\n      setUser(null);\n      setLoading(false);\n    }\n  }, [token, loadUser, setIsAuthenticated, setUser, setLoading]);\n\n  // Registering a new user\n  const register = async (formData) => {\n    try {\n      // Log payload for debugging\n      console.log(\"Register payload:\", JSON.stringify(formData));\n      \n      const res = await axios.post('/api/auth/register', formData, {\n        timeout: 15000, // 15 seconds timeout\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      setToken(res.data.token);\n      localStorage.setItem('token', res.data.token);\n      setUser(res.data.user);\n      setIsAuthenticated(true);\n      toast.success('Registration successful!');\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n      \n      // Enhanced error handling\n      if (error.code === 'ECONNABORTED') {\n        toast.error('Registration request timed out. Please try again.');\n      } else if (!error.response) {\n        toast.error('Network error. Please check your connection.');\n      } else {\n        const errorMessage = error.response && error.response.data.error\n          ? error.response.data.error\n          : 'Registration failed. Please try again.';\n        toast.error(errorMessage);\n      }\n      \n      return false;\n    }\n  };\n\n  // Login user\n  const login = async (formData) => {\n    try {\n      // Clear existing token first\n      localStorage.removeItem('token');\n      delete axios.defaults.headers.common['x-auth-token'];\n      \n      // Log payload for debugging\n      console.log(\"Login payload:\", JSON.stringify(formData));\n      \n      // Get CSRF token if your backend uses it\n      const csrfToken = document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content');\n      \n      const res = await axios.post('/api/auth/login', formData, {\n        timeout: 10000, // 10 seconds timeout\n        headers: {\n          'Content-Type': 'application/json',\n          ...(csrfToken && { 'X-CSRF-Token': csrfToken })\n        }\n      });\n      \n      const newToken = res.data.token;\n      \n      // Validate token before storing\n      try {\n        jwtDecode(newToken); // This will throw an error if token is invalid\n      } catch (tokenError) {\n        console.error('Invalid token received:', tokenError);\n        toast.error('Authentication error. Please try again.');\n        return false;\n      }\n      \n      setToken(newToken);\n      localStorage.setItem('token', newToken);\n      setUser(res.data.user);\n      setIsAuthenticated(true);\n      toast.success('Login successful!');\n      return true;\n    } catch (error) {\n      console.error('Login error:', error);\n      \n      // Enhanced error handling\n      if (error.code === 'ECONNABORTED') {\n        toast.error('Login request timed out. Please try again.');\n      } else if (!error.response) {\n        toast.error('Network error. Please check your connection.');\n      } else if (error.response.status === 400) {\n        toast.error('Invalid credentials. Please check your email and password.');\n      } else if (error.response.status === 401) {\n        toast.error('Unauthorized. Please check your credentials.');\n      } else if (error.response.status === 403) {\n        toast.error('Account locked or disabled. Please contact support.');\n      } else {\n        const errorMessage = error.response && error.response.data.error\n          ? error.response.data.error\n          : 'Login failed. Please check your credentials.';\n        toast.error(errorMessage);\n      }\n      \n      return false;\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete axios.defaults.headers.common['x-auth-token'];\n    setToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n    toast.info('You have been logged out');\n  };\n\n  // Checking if user is admin\n  const isAdmin = () => {\n    return user && user.role === 'admin';\n  };\n\n  // Checking if user is the author of a resource\n  const isAuthor = (authorId) => {\n    return user && user._id === authorId;\n  };\n\n  // Refresh token function (if your backend supports it)\n  const refreshToken = async () => {\n    try {\n      const res = await axios.post('/api/auth/refresh', { token }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      const newToken = res.data.token;\n      setToken(newToken);\n      localStorage.setItem('token', newToken);\n      return true;\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      logout();\n      toast.error('Session expired. Please login again.');\n      return false;\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        token,\n        isAuthenticated,\n        loading,\n        register,\n        login,\n        logout,\n        isTokenExpired,\n        isAdmin,\n        isAuthor,\n        refreshToken\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}